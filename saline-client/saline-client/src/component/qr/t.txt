import React, { useState } from 'react';
import './App.css';
import Html5QrcodePlugin from './Html5QrcodePlugin.jsx';
import ResultContainerPlugin from './ResultContainerPlugin.jsx';

const App = () => {
  const [decodedResults, setDecodedResults] = useState([]);
  const [showScanDetails, setShowScanDetails] = useState(false);
  const [showDeviceDetails, setShowDeviceDetails] = useState(false);
  const [clientID, setClientID] = useState('');
  const [deviceID, setDeviceID] = useState('');
  const [result, setResult] = useState('');

  const onNewScanResult = (decodedText, decodedResults) => {
    console.log("App [result]", decodedResults);
    setDecodedResults(prev => [...prev, decodedResults]);
  };

  const handleScanClick = () => {
    setShowScanDetails(true);
    setShowDeviceDetails(false);
  };

  const handleAddDeviceClick = () => {
    setShowScanDetails(false);
    setShowDeviceDetails(true);
  };

  const handleAddDevice = (e) => {
    e.preventDefault();
    // Perform any necessary validation or API calls
    // Set the result using setResult
    const addedDeviceResult = `Client ID: ${clientID}, Device ID: ${deviceID}`;
    setResult(addedDeviceResult);
  };

  return (
    <div className="App">
      <section className="App-section">
        <div className="App-section-title">Scan here</div>
        <div className="scan-container">
          {showScanDetails ? (
            <>
              <Html5QrcodePlugin
                fps={10}
                qrbox={250}
                disableFlip={false}
                qrCodeSuccessCallback={onNewScanResult}
              />
              <ResultContainerPlugin results={decodedResults} />
            </>
          ) : (
            <button onClick={handleScanClick} className="scan-button">
              Scan
            </button>
          )}
        </div>
      </section>
      <section className="App-section">
        <div className="App-section-title">Add Device</div>
        <div className="add-device-container">
          {showDeviceDetails ? (
            <form onSubmit={handleAddDevice}>
              <label>
                Client ID:
                <input
                  type="text"
                  value={clientID}
                  onChange={(e) => setClientID(e.target.value)}
                />
              </label>
              <label>
                Device ID:
                <input
                  type="text"
                  value={deviceID}
                  onChange={(e) => setDeviceID(e.target.value)}
                />
              </label>
              <button type="submit" className="add-device-button">
                Add Device
              </button>
            </form>
          ) : (
            <button onClick={handleAddDeviceClick} className="add-device-button">
              Add Device
            </button>
          )}
          {result && <p>{result}</p>}
        </div>
      </section>
    </div>
  );
};

export default App;





.App {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
  }
  
  .App-section {
    margin-bottom: 20px;
    padding: 20px;
    border-radius: 5px;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .App-section-title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
  }
  
  .scan-container,
  .add-device-container {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .scan-button,
  .add-device-button {
    padding: 15px 30px;
    font-size: 16px;
    font-weight: bold;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  .scan-button:hover,
  .add-device-button:hover {
    background-color: #0056b3;
  }
  
  form {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-top: 10px;
  }
  
  label {
    margin-bottom: 5px;
  }
  
  input {
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 200px;
  }
  
  p {
    margin-top: 10px;
    font-size: 16px;
    color: #555;
  }